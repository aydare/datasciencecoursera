w$Temp[m]
w$Temp[w$Month[w$Month==6]]
w$Temp[w$Temp[m]]
w$Temp[w$Month==6]
t<-w$Temp[w$Month==6]
t
mean(t)
t<-w$Temp[w$Month==5]
t<-w$Ozone[w$Month==5]
t
max(t)
max(na.omit(t))
x<-data.frame(1:20)
x
?nrow
y<-matrix(1:20,nrow = 4, ncol = 5,dimnames = "a","b","c","d","e")
y<-matrix(1:20,nrow = 4, ncol = 5,dimnames = "a")
y<-matrix(1:20,nrow = 4, ncol = 5,dimnames = a)
y<-matrix(1:20,nrow = 4, ncol = 5)
z<- matrix(3:22, nrow = 4,ncol = 5)
zz+y
z+y
z*y
z
y
hw1<-read.csv('/users/ayoade.g.dare/downloads/hw1_data.csv',header = TRUE,sep = ",")
head(hw1)
?head
?limitedLabels
?trunc
?ceiling
ceiling(hw1)
trunc(hw1)
trunc(hw1,4)
hw1$Ozone
hw1$Ozone[4]
hw1$Ozone[>3]
[hw1$Ozone>5]
hw1$Ozone{>3}
hw1$Solar.R[hw1$Ozone==NA]
hw1$Solar.R[hw1$Ozone=NA]
hw1$Solar.R[hw1$Ozone==NA]
hw1$Solar.R[is.na(hw1$Ozone)]
na.omit(hw1$Solar.R[is.na(hw1$Ozone)])
na.omit(hw1$Ozone)
mean(na.omit(hw1$Ozone))
hw1$Ozone>31
(hw1$Ozone>31)
na.omit(hw1$Ozone>31)
(na.omit(hw1$Ozone>31))&(na.omit(hw1$Temp>90))
(na.omit(hw1$Ozone>31)),(na.omit(hw1$Temp>90))
(na.omit(hw1$Ozone>31)) and (na.omit(hw1$Temp>90))
(na.omit(hw1$Ozone>31))&(na.omit(hw1$Temp>90))
hw1$Solar.R[(na.omit(hw1$Ozone>31))&(na.omit(hw1$Temp>90))]
mean(hw1$Solar.R[(na.omit(hw1$Ozone>31))&(na.omit(hw1$Temp>90))])
x<-4
class(x)
x<-c(4,'a', TRUE)
class(x)
x<-c(1,3,5)
y<-c(3,2,10)
rbind(x,y)
x<-list(2,'a','b',TRUE)
x[[2]]
x<-1:4
y<-2:3
x+y
class(x+y)
class(y)
head(hw1)
hw1
tail(hw1)
hw1$Ozone[47]
sum(is.na(hw1$Ozone))
!(is.na(hw1$Ozone))
mean(!(is.na(hw1$Ozone)))
[!(is.na(hw1$Ozone))]
(!(is.na(hw1$Ozone)))
hw1$Ozone[!(is.na(hw1$Ozone))]
mean(hw1$Ozone[!(is.na(hw1$Ozone))])
mean(hw1$Solar.R[[!(is.na(hw1$Ozone[hw1$Ozone>31]))]&[(!(is.na(hw1$Temp[hw1$Temp>90])))]])
mean(hw1$Solar.R[[!(is.na(hw1$Ozone[hw1$Ozone>31]))],[(!(is.na(hw1$Temp[hw1$Temp>90])))]])
is.na(hw1$Ozone[hw1$Ozone>31])
!(is.na(hw1$Ozone[hw1$Ozone>31]))
[!(is.na(hw1$Ozone[hw1$Ozone>31]))]
hw1$Ozone[hw1$Ozone>31]
na.omit(hw1$Ozone[hw1$Ozone>31])
a<-na.omit(hw1$Ozone[hw1$Ozone>31])
b<-na.omit(hw1$Temp>90)
b
b<-na.omit(hw1$Temp[hw1$Temp>90])
b
mean(hw1$Solar.R[a&b])
mean(hw1$Solar.R[a&b],na.rm = FALSE)
mean(hw1$Solar.R[a&b],na.rm = TRUE)
na.omit(mean(hw1$Solar.R[a&b]))
hw1$Temp[hw1$Month==6]
Mean(hw1$Temp[hw1$Month==6])
mean(hw1$Temp[hw1$Month==6])
max(hw1$Ozone[hw1$Month==5])
max(hw1$Ozone[hw1$Month==5],na.rm = TRUE)
mean(hw1$Solar.R[[a]&[b]])
mean(hw1$Solar.R[[a]&[b]])
na.omit(hw1$Solar.R[[a]&[b]])
mean(hw1$Solar.R[[a&b]])
mean(hw1$Solar.R[[a&b]],na.rm = TRUE)
mean(hw1$Solar.R[a&b],na.rm = TRUE)
mean(hw1$Solar.R[a&b])
na.omit(mean(hw1$Solar.R[a&b]))
mean(na.omit(hw1$Solar.R[a&b]))
a
b
hw1$Solar.R[a]&hw1$Solar.R[b]
hw1$Solar.R[hw1$Solar.R[a]&hw1$Solar.R[b]]
mean(hw1$Solar.R[hw1$Solar.R[a]&hw1$Solar.R[b]])
mean(hw1$Solar.R[hw1$Solar.R[a]&hw1$Solar.R[b]],na.rm = TRUE)
hw1$Solar.R[hw1$Solar.R[a]&hw1$Solar.R[b]]
c<-hw1$Solar.R[hw1$Solar.R[a]&hw1$Solar.R[b]]
na.omit(c)
d<-na.omit(c)
d
mean(d)
library("swirl", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
swirl()
==
TRUE==TRUE
(FALSE==TRUE)==FALSE
6==7
6<7
10<=10
5!=7
!TRUE(5=7)
!TRUE(5==7)
5!=7
!5==7
FALSE& FALSE
TRUE & c(TRUE, FALSE,FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE |c(TRUE, FALSE,FALSE)
TRUE||c(TRUE,FALSE,FALSE)
5>8||6!=8 && 4>3.9
isTRUE((6>4))
isTRUE(6>4)
identical('twins','twins')
xor(5==6,!FALSE)
ints<-sample(10)
ints
ints>5
(c(ints>7))
c(ints>7)
[ints>7]
ints[ints>7]
info()
isTRUE(ints>7)
skip()
any(ints<0)
all(ints>0)
Sys.Date()
Mean(c(2,4,5))
mean(c(2,4,5))
x<-x
x<-'x'
x
x<-mean(c(2,4,5))
submit(x)
x<-'x'
submit(x)
x==x
submit(x)
x
x
x<-##x
x
x
x<-###x
x
skip()
boring_function('My first function')
boring_function('My first function!')
x('x')
x<-y('x')
x<-x('y')
nxt()
boring_function()
boring_function
my_vector<-c(1,2,3)
my_mean<-function(my_vector){(sum(my_vector))/(length(my_vector))}
submit(my_vector)
submit(my_mean())
submit(my_mean(my_vector))
my_mean()
my_vector
my_mean(my_vector)
submit(my_mean(my_vector))
submit(my_mean(my_vector))
submit(my_mean)
my_mean
submit(my_mean)
submit(my_mean)
my_mean<- function({sum(c(1,2,3))/length(c(1,2,3))})
my__mean<- function(my_vector){(sum(c(1,2,3)))/(length(c(1,2,3)))}
submit(my__mean(my_vector))
my__mean<- function(my_vector){#(sum(c(1,2,3)))/(length(c(1,2,3)))}
my__mean<- function(my_vector){(sum(c(1,2,3)))/(length(c(1,2,3)))}
my__mean
my__mean(my_vector )
nxt()
submit(my_mean(my_vector ))
skip()
info()
nxt()
my_vector
my_vector<-c(4,5,10)
my_mean(my_vector = c(4,5,10))
submit(my_mean(my_vector = c(4,5,10)))
submit()
submit(my_vector)
submit(my_vector=c(4,5,10))
submit(my_mean(my_vector = c(1,2,3))
submit(my_mean(my_vector = c(1,2,3))
submit(my_mean(my_vector = c(4,5,10)))
submit(my_mean(my_vector = c(1,2,3))
0
submit(my_mean(my_vector = c(1,2,3))
submit()
nxt()
save(my__mean(my_vector = c(1,2,3)))
save(my_mean(my_vector))
save(my_mean)
nxt()
skip()
info()
main()
2
main()
Sys.Date()
mean(c(2,4,5))
boring_function<- function(x){x}
boring_function()
boring_function(x)
submit(x)
submit(boring_function(x))
submit(boring_function())
submit(boring_function(function(x)))
submit(boring_function())
boring_function(x)
boring_function()
submit(boring_function(x = 'x'))
submit(boring_function(x))
submit
nxt()
submit
submit
source('/private/var/folders/q8/2bmycfx95z510l43gqcjcb480000gn/T/RtmpqIC4Zf/boring_function.R')
submit
submit(boring_function(x))
submit
source('/var/folders/q8/2bmycfx95z510l43gqcjcb480000gn/T//RtmpqIC4Zf/my_mean.R')
submit
submit(boring_function(x))
boring_function <- function(x) {x
#x
}
source('/private/var/folders/q8/2bmycfx95z510l43gqcjcb480000gn/T/RtmpqIC4Zf/boring_function.R')
submit
submit(x)
submit(boring_function())
submit(boring_function(x))
source('/private/var/folders/q8/2bmycfx95z510l43gqcjcb480000gn/T/RtmpqIC4Zf/boring_function.R')
source('/private/var/folders/q8/2bmycfx95z510l43gqcjcb480000gn/T/RtmpqIC4Zf/boring_function.R')
source('/private/var/folders/q8/2bmycfx95z510l43gqcjcb480000gn/T/RtmpqIC4Zf/boring_function.R')
submit
submit()
boring_function('My first function')
boring_function('My first function!')
boring_function
my_mean <- function(my_vector) {sum(my_vector)/length(my_vector)
# Write your code here!
# Remember: the last expression evaluated will be returned!
}
submit()
my_mean(my_vector = c(4,5,10))
remainder <- function(num, divisor) {7 %% 4
# Write your code here!
# Remember: the last expression evaluated will be returned!
}
submit()
# Write your code here!
# Remember: the last expression evaluated will be returned!
}
# Write your code here!
# Remember: the last expression evaluated will be returned!
}
submit()
remainder <- function(num, divisor) {5 %% 2
# Write your code here!
# Remember: the last expression evaluated will be returned!
}
submit()
source('/var/folders/q8/2bmycfx95z510l43gqcjcb480000gn/T//RtmpqIC4Zf/remainder.R')
remainder <- function(num, divisor) {5 %% 2
# Write your code here!
# Remember: the last expression evaluated will be returned!
}
# Write your code here!
# Remember: the last expression evaluated will be returned!
}
remainder <- function(num, divisor) {7 %% 2
# Write your code here!
# Remember: the last expression evaluated will be returned!
}
remainder <- function(num, divisor) {7 %% 2
# Write your code here!
# Remember: the last expression evaluated will be returned!
}
submit()
remainder <- function(num, divisor) {5 %% 2
# Write your code here!
# Remember: the last expression evaluated will be returned!
}
submit()
skip()
remainder(5)
remainder(11,5)
remainder(divisor = 11,num = 5)
remainder(4,divisor = 2)
args(remainder)
evaluate <- function(func, dat){dat(2,4)
# Write your code here!
# Remember: the last expression evaluated will be returned!
}
submit()
submit()
evaluate <- function(func, dat){func(dat)
# Write your code here!
# Remember: the last expression evaluated will be returned!
}
submit()
evaluate(func = c(1.4,3.6,7.9,8.8),dat = c(1.4,3.6,7.9,8.8))
evaluate(func,dat)
evaluate(c(1.4,3.6,7.9,8.8))
evaluate(func,dat = c(1.4,3.6,7.9,8.8))
evaluate()
nxt()
evaluate(func,dat = c(1.4,3.6,7.9,8.8))
skip()
evaluate(function(x){x+1},6)
evaluate(function(x){head},c(8,4,0))
play()
evaluate(function(x){head},c(8,4,0))
evaluate(function(x){head(c(8,4,10))},x)
evaluate(function(x){x[1]},c(8,4,10))
nxt()
evaluate(function(x){x[1]},c(8,4,10))
skip()
evaluate(function(x){x[1]},c(8,4,0))
evaluate(function(x){x[3]},c(8,4,0))
evaluate(function(x){x[0]},c(8,4,0))
evaluate(function(x){x[3]}, c(8,4,0))
evaluate(function(x){length(x)}, c(8,4,0))
skip()
paste()
?paste
paste("programming" "is" "fun!")
paste("programming", "is", "fun!")
paste("Programming", "is", "fun!")
telegram <- function(...){paste("Good", "morning", sep = " ")
}
submit()
play()
submit()
telegram <- function(...){paste("Good", "morning", sep = " ", collapse = NULL)
}
submit()
skip()
telegram("hello")
skip()
main()
Sys.Date()
mean(c(2,4,5))
#x
}
boring_function <- function(x) {
#x
}
submit()
boring_function <- function(x) {
x
}
submit()
boring_function('My first function!')
boring_function
my_mean <- function(my_vector) {sum(my_vector)/length(my_vector)
# Write your code here!
# Remember: the last expression evaluated will be returned!
}
submit()
my_mean(c(4,5,10))
remainder <- function(num, divisor=2) {
# Write your code here!
# Remember: the last expression evaluated will be returned!
}
submit()
remainder <- function(num, divisor=2) { num %% divisor
# Write your code here!
# Remember: the last expression evaluated will be returned!
}
submit()
remainder(5,2)
remainder(11,5)
remainder(divisor = 11,num = 5)
remainder(4,divisor = 2)
args(remainder)
evaluate <- function(func, dat){func(dat)
# Write your code here!
# Remember: the last expression evaluated will be returned!
}
submit()
evaluate(sd,c(1.4,3.6,7.9,8.8)
evaluate(sd,c(1.4,3.6,7.9,8.8))
evaluate(function(x){x+1},6)
evaluate(function(x),{x[1]},c(8,4,0))
evaluate(function(x){x[1]},c(8,4,0))
evaluate(function(x){x[length(x)]},c(8,4,0))
?paste
paste("Programming", "is", "fun!")
telegram <- function(...)paste({"START",...,"STOP"
})
submit()
telegram("hello world")
# Don't modify any code below this comment.
# Notice the variables you'll need to create in order for the code below to
# be functional!
paste("News from", place, "today where", adjective, "students took to the streets in protest of the new", noun, "being installed on campus.")
mad_libs <- function(...){
# Do your argument unpacking here!
args <- list(...)
place <- args[["place"]]
adjective <- args[["adjective"]]
noun <- args[["noun"]]
# Don't modify any code below this comment.
# Notice the variables you'll need to create in order for the code below to
# be functional!
paste("News from", place, "today where", adjective, "students took to the streets in protest of the new", noun, "being installed on campus.")
}
submit()
mad_libs("Houston","inspirational","drinking laws")
paste("%p%",sep = "")
submit()
paste("%p%",sep = "")
submit
submit()
submit()
"%p%" <- function(x){ # Remember to add arguments!
paste(" ",sep = "")
}
submit()
"%p%" <- function(){ # Remember to add arguments!
paste(" ",sep = "",collapse = NULL)
}
submit()
skip()
function("I","love", "R!")
"%p%"
"I%p%love,R!"
skip()
1
swirl()
head(flags)
dim(flags)
class(flags)
cls_list<- lapply(flags,class)
cls_list
class(cls_list)
as.character(cls_list)
?sapply
sapply(cls_list,class)
sapply(cls_list,FUN = "",simplify = TRUE)
sapply(cls_list,simplify = TRUE)
sapply(cls_list,FUN = "+",simplify = TRUE)
sapply(flags, class)
cls_vect<- sapply(flags,class)
class(cls_vect)
sum(flags$orange)
flag_colors<-flags[,11:17]
head(flag_colors)
lapply(flag_colors,sum)
sapply(flag_colors,sum)
sapply(flag_colors, mean)
flag_shapes<- flags[,19:23]
lapply(flag_shapes,range)
sapply(flag_shapes, range)
shape_mat<- sapply(flag_shapes,range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6))
unique_vals<-lapply(flags, unique)
unique_vals
length(unique_vals)
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem)elem[2])
swirl()
read.table('/users/ayoade.g.dare/documents/coursera/hw1_data.csv/',header = TRUE,sep = ",")
read.table('/ayoade.g.dare/documents/coursera/hw1_data.csv/',header = TRUE,sep = ",")
read.table('/users/ayoade.g.dare/documents/hw1_data.csv', header = TRUE, sep = ",")
read.csv('/users/ayoade.g.dare/documents/hw1_data.csv', header = TRUE, sep = ",")
hw1
hw1<- read.csv('/users/ayoade.g.dare/documents/hw1_data.csv',header = TRUE, sep = ",")
?read.csv
read.table('~/documents/coursera/hw1_data.csv',header = TRUE,sep = ",")
savehistory("~/Documents/Coursera/Untitled.Rhistory")
